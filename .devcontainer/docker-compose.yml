volumes:
  certs:
    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local
  postgresdata:
    driver: local


networks:
  default:
    name: elastic
    external: false


services:
  connected-systems-api:
    image: docker.52north.org/sensor-web/cs-api:latest
    build:
      context: ../
      target: hybrid
    environment:
      - TIMESCALEDB_HOST=timescaledb
      - TIMESCALEDB_PORT=5432
      - TIMESCALEDB_DB=csa
      - TIMESCALEDB_USER=timescaledb
      - TIMESCALEDB_PASSWORD=password
      - ELASTIC_HOST=es01
      - ELASTIC_PORT=9200
      - ELASTIC_DB=csa
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=password
    volumes:
      - ../connected-systems-api/:/app/connected-systems-api/
      - ./connected-systems-api/openapi-config-csa.yml:/app/connected-systems-api/openapi-config-csa.yml
      - ./connected-systems-api/pygeoapi-config.yml:/app/connected-systems-api/pygeoapi-config.yml
      - ./data/:/srv/data/
      - ./_vscode/:/app/.vscode
    ports:
      - 5000:5000
    depends_on:
      es01:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
    command: sleep infinity

  timescaledb:
    image: timescale/timescaledb-ha:pg16
    restart: always
    ports:
      - 5432:5432
    environment:
      TIMESCALEDB_TELEMETRY: off
      POSTGRES_DB: csa
      POSTGRES_USER: timescaledb
      POSTGRES_PASSWORD: password
      ALLOW_IP_RANGE: 0.0.0.0/0
      POSTGRES_MULTIPLE_EXTENSIONS: postgis
    volumes:
      - postgresdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "--dbname=csa"]
      interval: 10s
      timeout: 5s
      retries: 5

  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: kibana\n"\
          "    dns:\n"\
          "      - kibana\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: [ "CMD-SHELL", "[ -f config/certs/es01/es01.crt ]" ]
      interval: 1s
      timeout: 5s
      retries: 120

  es01:
    # depends_on:
    #   setup:
    #     condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    labels:
      # hints used by filebeat
      # Do we use filebeat here?
      # Docu: https://www.elastic.co/guide/en/beats/filebeat/current/configuration-autodiscover-hints.html#_co_elastic_logsmodule
      co.elastic.logs/module: elasticsearch
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
      # TODO: sync with deployment resources
      - "ES_JAVA_OPTS=-Xms750m -Xmx750m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

######  Debugging  ######
#
# KIBANA
#
# Connect to ui with user: elastic::password
# managed indices: http://localhost:5601/app/management/data/index_management/indices
#
#  kibana:
#
#    depends_on:
#      es01:
#        condition: service_healthy
#    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
#    labels:
#      co.elastic.logs/module: kibana
#    volumes:
#      - certs:/usr/share/kibana/config/certs
#      - kibanadata:/usr/share/kibana/data
#    ports:
#      - ${KIBANA_PORT}:5601
#    environment:
#      - SERVERNAME=kibana
#      - ELASTICSEARCH_HOSTS=https://es01:9200
#      - ELASTICSEARCH_USERNAME=kibana_system
#      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
#      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
#      - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
#      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
#      - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
#    healthcheck:
#      test:
#        [
#          "CMD-SHELL",
#          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
#        ]
#      interval: 10s
#      timeout: 10s
#      retries: 120

#  pgadmin:
#    image: dpage/pgadmin4
#    environment:
#      PGADMIN_DEFAULT_EMAIL: admin@example.io
#      PGADMIN_DEFAULT_PASSWORD: admin
#      PGADMIN_CONFIG_SERVER_MODE: 'False'
#    ports:
#      - 5050:80
